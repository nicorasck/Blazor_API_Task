@* This is the Main/Parent Component: *NumberValidationComponent' *@

@inject NumberValidationApiService NumberValidationApiService;
@inject HttpClient Http
@inject GlobalService GlobalService
@* @inject IJSRuntime JSRuntime /*for localStorage interaction*/ *@


<h3 style="text-align: center; margin-top: 20px;">Number Validation</h3>
<div class="input-group placeholder-box">
    <input type="text" class="form-control" @bind="Number" placeholder="Enter a phone number" />
    <button class="btn btn-outline-secondary" type="button" @onclick="ValidateNumber">Validate</button>
    @* <button class="btn btn-outline-secondary" type="button" @onclick="SaveNumber">Save Result</button> *@
</div>
<div style="padding: 10px;"></div>

@if (numberValidationData == null && string.IsNullOrWhiteSpace(errorMessage))
{
    <div style="text-align: center;">
        <p>Still no data. Please Enter a phone number and then press "Validate"</p>
    </div>
}
else if (numberValidationData != null)
{
    <div class="card text-center">
        <div class="card-header">
            <h5 style="font-weight: bold;">Validation Result</h5>
        </div>
        <div class="card-body">
            <ul class="=card-list" style="list-style-type: none;">
                <li><b>Valid:</b> @numberValidationData.valid</li>
                <li><b>Number:</b> @numberValidationData.number</li>
                <li><b>International Format:</b> @numberValidationData.international_format</li>
                <li><b>Country Prefix</b> @numberValidationData.country_prefix</li>
                <li><b>Country Code:</b> @numberValidationData.country_code</li>
                <li><b>Country Name:</b> @numberValidationData.country_name</li>
                @* <li><b>Location:</b> @numberValidationData.location</li> *@
                <li><b>Carrier:</b> @numberValidationData.carrier</li>
                <li><b>Line Type:</b> @numberValidationData.line_type</li>
            </ul>
                <button class="btn btn-outline-secondary" type="button" @onclick="SaveNumber">Save Result</button>
            @* <a href="https://www.google.com/" class="btn btn-primary">Google</a> *@
        </div>
        <div class="card-footer text-body-secondary">
            Searched at: @DateTime.Now.ToString("f")
        </div>
    </div>
}



@code {

    public NumberValidationData? numberValidationData; // Validation API result
    public string Number = "";
    public string? errorMessage;
    private bool useMockData = true; // Set this to `true` for testing, `false` for live API calls

    public async Task ValidateNumber()
    {
        errorMessage = null;
        numberValidationData = null;

        if (string.IsNullOrWhiteSpace(Number))
        {
            errorMessage = "Please enter a phone number.";
            return;
        }

        if (useMockData) // testing code
        {
            // Use mock data for testing
            numberValidationData = MockData.GetMockNumberValidationData();
            //SaveNumber(); // Automatically save the mock data
        }
        else
        {
            // Live API logic
            string apiKey = NumberValidationApiService.GetApiKey();
            string url = $"https://apilayer.net/api/validate?access_key={apiKey}&number={Number}&country_code=&format=1";

            try
            {
                numberValidationData = await Http.GetFromJsonAsync<NumberValidationData>(url);

                /*if (numberValidationData != null)
                {
                    SaveNumber();
                }*/
            }
            catch (HttpRequestException ex)
            {
                errorMessage = "Network error.";
                Console.WriteLine(ex);
            }
            catch (Exception ex)
            {
                errorMessage = $"An unexpected error occurred: {ex.Message}";
            }
        }
    }

    /// <summary>
    /// To interact with the local storage an implementation needs to be done
    /// by using 'inject IJSRuntime JSRuntime' => a dependency injection.
    /// To load saved data from local storage you need to add OnInitializedAsync() .
    /// The code down below does not implement OnInitializedAsync()!
    /// </summary>
    public void SaveNumber()
    {
        if (numberValidationData != null)
        {
            Console.WriteLine($"Saving number: {numberValidationData.number}");
            // Create a new instance of NumberValidationData for saving
            var newNumber = new NumberValidationData
                {
                    valid = numberValidationData.valid,
                    number = numberValidationData.number,
                    local_format = numberValidationData.local_format,
                    international_format = numberValidationData.international_format,
                    country_prefix = numberValidationData.country_prefix,
                    country_code = numberValidationData.country_code,
                    country_name = numberValidationData.country_name,
                    carrier = numberValidationData.carrier,
                    line_type = numberValidationData.line_type
                };

            // Add to the global service
            GlobalService.AddNumber(newNumber);

            // Optional: Clear the input field for the next entry
            Number = string.Empty;

            Console.WriteLine("Number saved successfully.");

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("No validated number available to save.");
        }
    }


}
